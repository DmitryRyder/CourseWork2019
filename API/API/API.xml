<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:API.Code.JResult">
            <summary>
            Стандартный ответ API
            </summary>
        </member>
        <member name="P:API.Code.JResult.HttpStatusCode">
            <summary>
            Http код ответа
            </summary>
        </member>
        <member name="P:API.Code.JResult.Message">
            <summary>
            Сообщение
            </summary>
        </member>
        <member name="P:API.Code.JResult.Data">
            <summary>
            Данные
            </summary>
        </member>
        <member name="P:API.Code.JResult.DataCount">
            <summary>
            Количество
            </summary>
        </member>
        <member name="M:API.Code.JResult.#ctor(AutoMapper.IMapper,System.Object,System.Type,System.Int64,System.Net.HttpStatusCode)">
            <inheritdoc />
            <summary>
            Конструктор для удачного запроса
            </summary>
        </member>
        <member name="M:API.Code.JResult.#ctor(System.String,System.Net.HttpStatusCode)">
            <inheritdoc />
            <summary>
            Консутрктор для некорректно отправленного пользовательсткого запроса или сообщения
            </summary>
        </member>
        <member name="M:API.Code.JResult.#ctor(System.Object,System.Net.HttpStatusCode)">
            <inheritdoc />
            <summary>
            Консутрктор для возврата http-ответа без тела.
            Подходит, например, в случае удачного добавления или удаления сущности из базы.
            </summary>
        </member>
        <member name="M:API.Code.JResult.#ctor(System.Exception,System.String,System.Net.HttpStatusCode)">
            <inheritdoc />
            <summary>
            Консутрктор для запроса, вызвавшего внутреннюю ошибку в API
            </summary>
        </member>
        <member name="M:API.Controllers.Base.BaseController.Json(System.Object,System.Net.HttpStatusCode)">
            <summary>
            Конструктор для удачного запроса
            </summary>
        </member>
        <member name="M:API.Controllers.Base.BaseController.Json(AutoMapper.IMapper,System.Object,System.Type,System.Int64,System.Net.HttpStatusCode)">
            <summary>
            Конструктор для удачного запроса
            </summary>
        </member>
        <member name="M:API.Controllers.Base.BaseController.Json(System.String,System.Net.HttpStatusCode)">
            <summary>
            Конструктор для некорректно отправленного пользовательсткого запроса или сообщения
            </summary>
        </member>
        <member name="T:API.Controllers.MPManagementBodyController">
            <summary>
            Контроллер для работы с узлами тепловой сети
            </summary>
        </member>
        <member name="M:API.Controllers.MPManagementBodyController.GetAllManagementBodies">
            <summary>
            Метод возвращающий все органы управления из базы данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPManagementBodyController.AddManagementBody(Common.DTO.ManagementBodyDto)">
            <summary>
            Метод добавляющий орган управления в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPManagementBodyController.UpdateManagementBody(System.Guid,Common.DTO.ManagementBodyDto)">
            <summary>
            Метод для обновления существующего органа управления в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPManagementBodyController.DeleteTypeOfNode(System.Guid)">
            <summary>
            Метод для удаления органа управления по id
            </summary>
        </member>
        <member name="T:API.Controllers.MPOrganizationsController">
            <summary>
            Контроллер для работы с организациями
            </summary>
        </member>
        <member name="M:API.Controllers.MPOrganizationsController.GetAllOrganizationsM">
            <summary>
            Метод возвращающий все организации из базы данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPOrganizationsController.AddOrganizationM(Common.DTO.OrganizationMDto)">
            <summary>
            Метод добавляющий организацию в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPOrganizationsController.DeleteOrganizationM(System.Guid)">
            <summary>
            Метод для удаления организации по id
            </summary>
        </member>
        <member name="T:API.Controllers.MPPipelineSectionController">
            <summary>
            Контроллер для работы с трубами
            </summary>
        </member>
        <member name="M:API.Controllers.MPPipelineSectionController.GetAllPipelineSections">
            <summary>
            Метод возвращающий все участки трбопровода из базы данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPPipelineSectionController.AddPipelineSections(Common.DTO.PipelineSectionDto)">
            <summary>
            Метод добавляющий участок трубопровода в базу данных, включая вновь созданные участки трубопровода
            </summary>
        </member>
        <member name="M:API.Controllers.MPPipelineSectionController.DeletePipelineSections(System.Guid)">
            <summary>
            Метод для удаления участка трубопровода по id
            </summary>
        </member>
        <member name="T:API.Controllers.MPSteelPipeController">
            <summary>
            Контроллер для работы с трубами
            </summary>
        </member>
        <member name="M:API.Controllers.MPSteelPipeController.GetAllPipes">
            <summary>
            Метод возвращающий все трубы из базы данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPSteelPipeController.AddPipe(Common.DTO.SteelPipeDto)">
            <summary>
            Метод добавляющий трубу в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPSteelPipeController.UpdatePipe(System.Guid,Common.DTO.SteelPipeDto)">
            <summary>
            Метод для обновления существующей трубы в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPSteelPipeController.DeletePipe(System.Guid)">
            <summary>
            Метод для удаления трубы по id
            </summary>
        </member>
        <member name="T:API.Controllers.MPThermalNetworkController">
            <summary>
            Контроллер для работы с тепловыми сетями
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalNetworkController.GetAllThermalNetworks">
            <summary>
            Метод возвращающий все тепловые сети из базы данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalNetworkController.AddThermalNetwork(Common.DTO.ThermalNetworkDto)">
            <summary>
            Метод добавляющий тепловую сеть в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalNetworkController.DeleteThermalNetwork(System.Guid)">
            <summary>
            Метод для удаления тепловой сети по id
            </summary>
        </member>
        <member name="T:API.Controllers.MPThermalNodeController">
            <summary>
            Контроллер для работы с узлами тепловой сети
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalNodeController.GetAllThermalNode">
            <summary>
            Метод возвращающий все типы сетей из базы данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalNodeController.AddThermalNode(Common.DTO.ThermalNodeDto)">
            <summary>
            Метод добавляющий узел в базу данных
            </summary>
        </member>
        <member name="T:API.Controllers.MPThermalTypeController">
            <summary>
            Контроллер для c типами сетей
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalTypeController.GetAllThermalTypes">
            <summary>
            Метод возвращающий все типы сетей из базы данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalTypeController.AddThermalType(Common.DTO.ThermalTypeDto)">
            <summary>
            Метод добавляющий тип сети в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalTypeController.UpdateThermalType(System.Guid,Common.DTO.ThermalTypeDto)">
            <summary>
            Метод для обновления существующего типа сети в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPThermalTypeController.DeleteThermalType(System.Guid)">
            <summary>
            Метод для удаления типа сети по id
            </summary>
        </member>
        <member name="T:API.Controllers.MPTypeOfNodesController">
            <summary>
            Контроллер для работы с типами узлов
            </summary>
        </member>
        <member name="M:API.Controllers.MPTypeOfNodesController.GetAllTypeOfNodes">
            <summary>
            Метод возвращающий все типы узлов из базы данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPTypeOfNodesController.AddTypeOfNode(Common.DTO.TypeOfNodeDto)">
            <summary>
            Метод добавляющий тип узла в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPTypeOfNodesController.UpdateTypeOfNode(System.Guid,Common.DTO.TypeOfNodeDto)">
            <summary>
            Метод для обновления существующего типа узла в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.MPTypeOfNodesController.DeleteTypeOfNode(System.Guid)">
            <summary>
            Метод для удаления типа узла по id
            </summary>
        </member>
        <member name="T:API.Controllers.ReportsController">
            <summary>
            Контроллер для отчетов согласно заданию
            </summary>
        </member>
        <member name="M:API.Controllers.ReportsController.GetWaterVolumeForManagementBodies">
            <summary>
            Метод возвращающий объем воды для всех органов управления
            </summary>
        </member>
        <member name="M:API.Controllers.ReportsController.GetWaterVolumeForOrganizations">
            <summary>
            Метод возвращающий объем воды для всех организаций
            </summary>
        </member>
        <member name="M:API.Controllers.ReportsController.GetPipesLengthForOrganizations(Common.Filters.OrganizationsFilterDto)">
            <summary>
            Метод возвращающий протяженность труб для выбранных организаций
            </summary>
        </member>
        <member name="M:API.Controllers.ReportsController.GetRepairsDataForPeriod(Common.Filters.PeriodFilter)">
            <summary>
            Метод возвращающий данные о ремонте трубопроводов за указанный период
            </summary>
        </member>
        <member name="M:API.RouteConfig.Configure(Microsoft.AspNetCore.Routing.IRouteBuilder)">
            <summary>
            Route Builder
            </summary>
            <param name="routes"></param>
        </member>
    </members>
</doc>
