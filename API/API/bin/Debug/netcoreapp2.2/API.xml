<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:API.Code.JResult">
            <summary>
            Стандартный ответ API
            </summary>
        </member>
        <member name="P:API.Code.JResult.HttpStatusCode">
            <summary>
            Http код ответа
            </summary>
        </member>
        <member name="P:API.Code.JResult.Message">
            <summary>
            Сообщение
            </summary>
        </member>
        <member name="P:API.Code.JResult.Data">
            <summary>
            Данные
            </summary>
        </member>
        <member name="P:API.Code.JResult.DataCount">
            <summary>
            Количество
            </summary>
        </member>
        <member name="M:API.Code.JResult.#ctor(AutoMapper.IMapper,System.Object,System.Type,System.Int64,System.Net.HttpStatusCode)">
            <inheritdoc />
            <summary>
            Конструктор для удачного запроса
            </summary>
        </member>
        <member name="M:API.Code.JResult.#ctor(System.String,System.Net.HttpStatusCode)">
            <inheritdoc />
            <summary>
            Консутрктор для некорректно отправленного пользовательсткого запроса или сообщения
            </summary>
        </member>
        <member name="M:API.Code.JResult.#ctor(System.Object,System.Net.HttpStatusCode)">
            <inheritdoc />
            <summary>
            Консутрктор для возврата http-ответа без тела.
            Подходит, например, в случае удачного добавления или удаления сущности из базы.
            </summary>
        </member>
        <member name="M:API.Code.JResult.#ctor(System.Exception,System.String,System.Net.HttpStatusCode)">
            <inheritdoc />
            <summary>
            Консутрктор для запроса, вызвавшего внутреннюю ошибку в API
            </summary>
        </member>
        <member name="M:API.Controllers.Base.BaseController.Json(System.Object,System.Net.HttpStatusCode)">
            <summary>
            Конструктор для удачного запроса
            </summary>
        </member>
        <member name="M:API.Controllers.Base.BaseController.Json(AutoMapper.IMapper,System.Object,System.Type,System.Int64,System.Net.HttpStatusCode)">
            <summary>
            Конструктор для удачного запроса
            </summary>
        </member>
        <member name="M:API.Controllers.Base.BaseController.Json(System.String,System.Net.HttpStatusCode)">
            <summary>
            Конструктор для некорректно отправленного пользовательсткого запроса или сообщения
            </summary>
        </member>
        <member name="T:API.Controllers.BuildingsController">
            <summary>
            Контроллер для работы со зданиями
            </summary>
        </member>
        <member name="M:API.Controllers.BuildingsController.GetAllBuildings">
            <summary>
            Метод возвращающий все здания в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.BuildingsController.GetRoomsForBuilding(System.Guid)">
            <summary>
            Метод возвращающий комнаты для определнного здания
            </summary>
        </member>
        <member name="M:API.Controllers.BuildingsController.GetFloorsForBuilding(System.Guid)">
            <summary>
            Метод возвращающий список этажей в здании
            </summary>
        </member>
        <member name="M:API.Controllers.BuildingsController.AddBuilding(Common.DTO.BuildingDto)">
            <summary>
            Метод добавляющий здание в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.BuildingsController.UpdateBuilding(System.Guid,Common.DTO.BuildingDto)">
            <summary>
            Метод для обновления существующего здания в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.BuildingsController.DeleteBuilding(System.Guid)">
            <summary>
            Метод для удаления здания по id
            </summary>
        </member>
        <member name="T:API.Controllers.ElectricsController">
            <summary>
            Контроллер для работы со зданиями
            </summary>
        </member>
        <member name="M:API.Controllers.ElectricsController.GetAllElectrics">
            <summary>
            Метод возвращающий всё электрооборудование для организаций в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.ElectricsController.AddElectric(Common.DTO.ElectricDto)">
            <summary>
            Метод добавляющий элекрооборудование в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.ElectricsController.UpdateElectric(System.Guid,Common.DTO.ElectricDto)">
            <summary>
            Метод для обновления существующего здания в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.ElectricsController.DeleteElectric(System.Guid)">
            <summary>
            Метод для удаления электрооборудования по id
            </summary>
        </member>
        <member name="T:API.Controllers.OrganizationsController">
            <summary>
            Контроллер для работы с организациями
            </summary>
        </member>
        <member name="M:API.Controllers.OrganizationsController.GetAllOrganizations">
            <summary>
            Метод возвращающий все организации в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.OrganizationsController.AddOrganization(Common.DTO.OrganizationDto)">
            <summary>
            Метод добавляющий организацию в базу данных
            </summary>
        </member>
        <member name="M:API.Controllers.OrganizationsController.UpdateOrganization(System.Guid,Common.DTO.OrganizationDto)">
            <summary>
            Метод для обновления существующей организации в базе данных
            </summary>
        </member>
        <member name="M:API.Controllers.OrganizationsController.DeleteOrganization(System.Guid)">
            <summary>
            Метод для удаления организации по id
            </summary>
        </member>
        <member name="M:API.RouteConfig.Configure(Microsoft.AspNetCore.Routing.IRouteBuilder)">
            <summary>
            Route Builder
            </summary>
            <param name="routes"></param>
        </member>
    </members>
</doc>
